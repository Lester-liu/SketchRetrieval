/*
 * Sketch-based 3D model retrieval
 *
 * This program is based on Eitz et al. paper, it has two component: a offline one and an online one. In the main
 * structure, we will code the online part which take a sketch as input and output a 3D model. The offline part is
 * coded in other project under the folder "utils/".
 *
 * Whenever you want to use this program, run the offline part first, which builds a database for online query.
 *
 * Parameters:
 *      d: TF-IDF database of all existing views information
 *      w: dictionary file generated by K-Means
 *      l: label file for all existing views
 *      m: folder to all PLY models
 *      c: camera mode
 *      f: file mode with input image file path
 *
 * Usage 1 (file based query):
 *      sketch -d [database_file] -w [dictionary_file] -l [label_file] -m [nodel_folder] -f [input_file]
 *
 * Usage 2 (real-time query with camera):
 *      sketch -d [database_file] -w [dictionary_file] -l [label_file] -m [nodel_folder] -c
 */

#include <iostream>
#include <fstream>
#include "opencv2/opencv.hpp"

#include <vtkPolyData.h>
#include <vtkPLYReader.h>
#include <vtkSmartPointer.h>
#include <vtkPolyDataMapper.h>
#include <vtkActor.h>
#include <vtkRenderWindow.h>
#include <vtkRenderer.h>
#include <vtkRenderWindowInteractor.h>

#include "clusters.h"

using namespace cv;
using namespace std;

enum Mode {Camera, File, Testing};
Mode mode = Testing;

string database_file, label_file, input_file, dictionary_file;

string model_base = "/home/lyx/workspace/data/TinySketch/models_ply/";

void show_help();

int retrieve(Mat& image, Clusters& dictionary); // return the index of model

void show_model(string file); // show 3D model with VTK

string to_name(int index); // build 3D model name given the index

bool parse_command_line(int argc, char **argv); // Process all arguments

int main(int argc, char** argv) {

    if (!parse_command_line(argc, argv))
        return EXIT_FAILURE;

    int model_index = -1;

    if (mode == File) {
        Mat image_gray = imread(input_file, CV_LOAD_IMAGE_GRAYSCALE);
        Mat image;
        image_gray.convertTo(image, CV_32FC1);
        //model_index = retrieve(image);
        cout << model_index << endl;
    }
    else if (mode == Camera) {

    }
    else { // Testing mode
        show_model(to_name(87));
    }



    return EXIT_SUCCESS;
}

// return the index of model
int retrieve(Mat& image, Clusters& dictionary) {
    // use Gabor filter

    // translate into words

    // compute TF-IDF

    // get nearest neighbor

    return -1;
}

// show 3D model with VTK
void show_model(string file) {

    vtkSmartPointer<vtkPLYReader> reader = vtkSmartPointer<vtkPLYReader>::New();
    reader->SetFileName(file.c_str());

    // Visualize
    vtkSmartPointer<vtkPolyDataMapper> mapper = vtkSmartPointer<vtkPolyDataMapper>::New();
    mapper->SetInputConnection(reader->GetOutputPort());

    vtkSmartPointer<vtkActor> actor = vtkSmartPointer<vtkActor>::New();
    actor->SetMapper(mapper);

    vtkSmartPointer<vtkRenderer> renderer = vtkSmartPointer<vtkRenderer>::New();
    vtkSmartPointer<vtkRenderWindow> renderWindow = vtkSmartPointer<vtkRenderWindow>::New();
    renderWindow->AddRenderer(renderer);
    vtkSmartPointer<vtkRenderWindowInteractor> renderWindowInteractor = vtkSmartPointer<vtkRenderWindowInteractor>::New();
    renderWindowInteractor->SetRenderWindow(renderWindow);

    renderer->AddActor(actor);
    renderer->SetBackground(0, 0, 0);

    renderWindow->Render();
    renderWindowInteractor->Start();

}

// build 3D model name given the index
string to_name(int index) {
    return model_base + "m" + to_string(index) + ".ply";
}

// Process all arguments
bool parse_command_line(int argc, char **argv) {

    int i = 1;
    while(i < argc) {
        if (argv[i][0] != '-')
            break;
        switch(argv[i][1]) {
            case 'h': // help
                show_help();
                return false;
            case 'd': // TF-IDF file
                database_file = argv[++i];
                break;
            case 'w': // dictionary file
                dictionary_file = argv[++i];
                break;
            case 'l': // label file
                label_file = argv[++i];
                break;
            case 'm': // folder containing all PLY models
                model_base = argv[++i];
                break;
            case 'f': // input sktech image
                mode = File;
                input_file = argv[++i];
                break;
            case 'c': // camera mode
                mode = Camera;
                break;
        }
        i++;
    }
    return true;
}

void show_help() {

}